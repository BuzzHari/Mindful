name: Build and Deploy Flutter App to Play Store and GitHub

on:
  push:
    tags:
      - "v*" # Triggers on tags starting with 'v' (e.g., v0.1.8+001)
    branches:
      - "main" # Only triggers if the tag is created on the 'main' branch

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "11"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "stable"

      - name: Extract Version, Build Number, and Changelog from Tag
        id: extract_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME%%+*}
          BUILD_NUMBER=${TAG_NAME##+}
          TAG_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF#refs/tags/} | \
            jq -r '.body')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "CHANGELOG=$TAG_BODY" >> $GITHUB_ENV

      - name: Update pubspec.yaml with Version and Build Number
        run: |
          sed -i "s/^version: .*/version: ${{ env.VERSION }}+${{ env.BUILD_NUMBER }}/" pubspec.yaml
          cat pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build the AAB
        run: flutter build appbundle --release

      - name: Upload AAB to Play Store
        uses: r0adkll/upload-google-play@v2
        with:
          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFile: build/app/outputs/bundle/release/app-release.aab
          track: ${{ secrets.TRACK }}
          status: draft
          releaseNotes: |
            ${{ env.CHANGELOG }}

      - name: Download Universal APK from Play Store
        id: download_apk
        run: |
          gcloud auth activate-service-account --key-file="${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}"
          gcloud config set project <your-google-cloud-project-id>
          gcloud --quiet --format="json" play internalappsharing artifacts download-apks --package-name=${{ secrets.PACKAGE_NAME }} --output-directory=universal_apk

      - name: Rename APK
        run: |
          mv universal_apk/*.apk universal_apk/Mindful_${{ env.VERSION }}+${{ env.BUILD_NUMBER }}_Universal.apk

      - name: Upload APK to Existing GitHub Release
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF#refs/tags/} | jq -r '.id')

          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @"universal_apk/Mindful_${{ env.VERSION }}+${{ env.BUILD_NUMBER }}_Universal.apk" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=Mindful_${{ env.VERSION }}+${{ env.BUILD_NUMBER }}_Universal.apk"

      - name: Cleanup
        if: success() # Only run if all previous steps were successful
        run: |
          echo "Cleaning up temporary files..."
          rm -rf build
          rm -rf universal_apk
          echo "Cleanup complete."
